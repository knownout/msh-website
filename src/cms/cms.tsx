// –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
import React from "react";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
import { TAccountData, CMSInternalConfiguration as config, Request } from ".";
import { configuration as app_config } from "../utils";

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
import CryptoJS from "crypto-js";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import MessageBox, { MessageBoxWorker, TMessageBoxData } from "./components/message-box";
import AuthForm from "./forms/auth-form/auth-form";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
import "./shared.less";
import ControlForm from "./forms/control-form/control-form";

interface IProps {}
interface IState {
	/**
     * –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
     */
	accountData?: TAccountData;

	/**
     * –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
	contentLoaded?: boolean;

	/**
	 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
	 */
	messageBox: TMessageBoxData;
}

export const AccountDataContext = React.createContext<TAccountData | null>(null);
export default class CMSRoot extends React.PureComponent<IProps, IState> {
	state: IState = { messageBox: { state: false } };
	constructor (props: IProps) {
		super(props);
	}

	/**
     * –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ,
     * –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
     *
     * @param login –ª–æ–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * @param password –ø–∞—Ä–æ–ª—å
     * @returns true –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
     */
	private readonly updateAccountData = async (login: string, password: string) => {
		const accountData = await this.requestAccountData(login, CryptoJS.MD5(password).toString());
		if (!accountData || !accountData.success) return false;

		localStorage.setItem(config.localSessionKey, `${login};${password}`);
		this.setState({ accountData: accountData.meta as TAccountData });

		return true;
	};

	/**
     * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
     * –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –µ—Å–ª–∏ –ª–æ–≥–∏ –∏ —Ö—ç—à –ø–∞—Ä–æ–ª—è –≤–µ—Ä–Ω—ã.
     *
     * @param login –ª–æ–≥–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param hash –ø–∞—Ä–æ–ª—å
     * @returns –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ –≤–∏–¥–µ TAccountData
     */
	private readonly requestAccountData = (login: string, hash: string) => {
		return fetch(app_config.api.server_path + app_config.api.authorization + `${login}&hash=${hash}`)
			.then(req => req.json() as Promise<Request.TRequestResult<TAccountData>>)
			.catch(() => {
				this.messageBoxWorker
					.updateContent({
						title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
						message:
							"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, " +
							"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
					})
					.updateState(true);
			});
	};

	componentDidMount () {
		/**
         * –ß–∏—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
         * –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SessionData
         * @param callback –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–Ω—è—Ç–Ω–æ üòê
         * @returns –∫–∞–∫ –Ω–∏ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ null üòë
         */
		const setNull = (callback?: () => any) => {
			if (callback) callback();
			return null;
		};

		/**
         * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ –∫–∞–∫–æ–º-–ª–∏–±–æ –∞–∫–∫–∞—É–Ω—Ç–µ –∏, –µ—Å–ª–∏
         * —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–µ –≤ –ª–æ–≥–∏–Ω –∏ —Ö—ç—à
         *
         * @returns null –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å –ø–∞—Ä–æ–ª–µ–º –∏ –ª–æ–≥–∏–Ω–æ–º
         */
		const sessionData = (() => {
			const sessionKey = localStorage.getItem(config.localSessionKey);
			if (!sessionKey) return null;

			const sessionData = sessionKey.split(";");
			if (sessionData.length != 2) return setNull(() => localStorage.removeItem(config.localSessionKey));

			return sessionData;
		})();

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –∏ –≤—Ö–æ–¥ –ø–æ –Ω–∏–º
		if (!sessionData) this.setState({ contentLoaded: true });
		else {
			const [ login, hash ] = [ sessionData[0], CryptoJS.MD5(sessionData[1]).toString() ];

			// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –∞–∫–∫–∞—É–Ω—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
			this.requestAccountData(login, hash).then(data => {
				if (!data) return this.setState({ contentLoaded: true });
				if (data.success) this.setState({ accountData: data.meta as TAccountData });

				// –ü—Ä–∏ –ª—é–±–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π
				this.setState({ contentLoaded: true });
			});
		}
	}

	// –û–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
	private readonly updateMessageBox = (box: TMessageBoxData) => this.setState({ messageBox: { ...box } });
	private readonly messageBoxWorker = new MessageBoxWorker(this.updateMessageBox, this.state.messageBox);

	render () {
		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
		let currentControlComponent = <AuthForm updateData={this.updateAccountData} />;
		if (this.state.accountData) currentControlComponent = <ControlForm updateData={this.updateAccountData} />;

		return (
			<div id="cms-root">
				<MessageBox messageBox={this.state.messageBox} worker={this.messageBoxWorker} />
				{this.state.contentLoaded ? (
					<div id="cms-content-wrapper">
						<AccountDataContext.Provider value={this.state.accountData || null}>
							{currentControlComponent}
						</AccountDataContext.Provider>
					</div>
				) : (
					<div id="cms-loading-handler">Loading</div>
				)}
			</div>
		);
	}
}
